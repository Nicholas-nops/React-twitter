{"ast":null,"code":"import axios from 'axios';\nconst apiUrl = 'http://localhost:3001/tweets';\n\nasync function getAllTweets() {\n  const res = await axios.get(apiUrl);\n  const tweets = res.data;\n  console.log(tweets);\n} //requisição com axios\n\n/* async function getAllGrades() {\r\n    const res = await axios.get(apiUrl)\r\n\r\n    const grades = res.data.grades.map(grade => {\r\n        //desestruturando data de grades\r\n        const { student, subject, type } = grade;\r\n\r\n        return {\r\n            ...grade,\r\n            studentLowerCase: student.toLowerCase(),\r\n            subjectLowerCase: subject.toLowerCase(),\r\n            typeLowerCase: type.toLowerCase(),\r\n            isDeleted: false\r\n        };\r\n    })\r\n    let allStudents = new Set();\r\n    grades.forEach((grade) => allStudents.add(grade.student));\r\n    allStudents = Array.from(allStudents);\r\n\r\n    let allSubjects = new Set();\r\n    grades.forEach((grade) => allSubjects.add(grade.subject));\r\n    allSubjects = Array.from(allSubjects);\r\n\r\n    let allTypes = new Set();\r\n    grades.forEach((grade) => allTypes.add(grade.type));\r\n    allTypes = Array.from(allTypes);\r\n\r\n    let maxId = -1;\r\n    grades.forEach(({id}) => {\r\n        if(id > maxId) {\r\n            maxId = id\r\n        }\r\n    })\r\n    let nexId = maxId + 1\r\n    const allCombinations = [];\r\n    allStudents.forEach((student) => {\r\n        allSubjects.forEach((subject) => {\r\n            allTypes.forEach((type) => {\r\n                allCombinations.push({\r\n                    student,\r\n                    subject,\r\n                    type,\r\n                })\r\n            })\r\n        })\r\n    })\r\n    allCombinations.forEach(({ student, subject, type }) => {\r\n\r\n        const hasItem = grades.find(grade => {\r\n           return grade.subject === subject && grade.student === student && grade.type === type;\r\n        });\r\n        if (!hasItem) {\r\n            grades.push({\r\n                id: nexId++,\r\n                student,\r\n                studentLowerCase: student.toLowerCase(),\r\n                subject,\r\n                subjectLowerCase: subject.toLowerCase(),\r\n                type,\r\n                typeLowerCase: type.toLowerCase(),\r\n                value: 0,\r\n                isDeleted: true\r\n            })\r\n        }\r\n    })\r\n\r\n    grades.sort((a,b) => a.typeLowerCase.localeCompare(b.typeLowerCase));\r\n    grades.sort((a,b) => a.subjectLowerCase.localeCompare(b.subjectLowerCase));\r\n    grades.sort((a,b) => a.studentLowerCase.localeCompare(b.studentLowerCase));\r\n    return grades;\r\n}\r\n//insert com axios\r\nasync function insertGrade(grade) {\r\n    const response = await axios.post(apiUrl,grade);\r\n    return response.data.id;\r\n}\r\n\r\nasync function updateGrade(grade) {\r\n    const response = await axios.put(apiUrl,grade);\r\n    return response.data;\r\n}\r\n\r\nasync function deleteGrade(grade) {\r\n    const response = await axios.delete(`${apiUrl}/${grade.id}`);\r\n    return response.data;\r\n}\r\nasync function getValidationFromGradeType(gradeType) {\r\n    const gradeValidation = grade_Validation.find(item => item.gradeType === gradeType);\r\n\r\n    const {minValue, maxValue} = gradeValidation;\r\n\r\n    return  {\r\n        minValue,\r\n        maxValue,\r\n    }\r\n}\r\n\r\n */\n\n\nexport { getAllTweets };","map":{"version":3,"sources":["C:/Users/Nicholas/Desktop/React/ReactTwitter/src/api/apiService.js"],"names":["axios","apiUrl","getAllTweets","res","get","tweets","data","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,8BAAf;;AAEA,eAAeC,YAAf,GAA6B;AACzB,QAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAUH,MAAV,CAAlB;AACA,QAAMI,MAAM,GAAGF,GAAG,CAACG,IAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACH,C,CAGD;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA,SAASH,YAAT","sourcesContent":["import axios from 'axios'\r\n\r\nconst apiUrl = 'http://localhost:3001/tweets'\r\n\r\nasync function getAllTweets(){\r\n    const res = await axios.get(apiUrl)\r\n    const tweets = res.data\r\n    console.log(tweets)\r\n}\r\n\r\n\r\n//requisição com axios\r\n/* async function getAllGrades() {\r\n    const res = await axios.get(apiUrl)\r\n\r\n    const grades = res.data.grades.map(grade => {\r\n        //desestruturando data de grades\r\n        const { student, subject, type } = grade;\r\n\r\n        return {\r\n            ...grade,\r\n            studentLowerCase: student.toLowerCase(),\r\n            subjectLowerCase: subject.toLowerCase(),\r\n            typeLowerCase: type.toLowerCase(),\r\n            isDeleted: false\r\n        };\r\n    })\r\n    let allStudents = new Set();\r\n    grades.forEach((grade) => allStudents.add(grade.student));\r\n    allStudents = Array.from(allStudents);\r\n\r\n    let allSubjects = new Set();\r\n    grades.forEach((grade) => allSubjects.add(grade.subject));\r\n    allSubjects = Array.from(allSubjects);\r\n\r\n    let allTypes = new Set();\r\n    grades.forEach((grade) => allTypes.add(grade.type));\r\n    allTypes = Array.from(allTypes);\r\n\r\n    let maxId = -1;\r\n    grades.forEach(({id}) => {\r\n        if(id > maxId) {\r\n            maxId = id\r\n        }\r\n    })\r\n    let nexId = maxId + 1\r\n    const allCombinations = [];\r\n    allStudents.forEach((student) => {\r\n        allSubjects.forEach((subject) => {\r\n            allTypes.forEach((type) => {\r\n                allCombinations.push({\r\n                    student,\r\n                    subject,\r\n                    type,\r\n                })\r\n            })\r\n        })\r\n    })\r\n    allCombinations.forEach(({ student, subject, type }) => {\r\n\r\n        const hasItem = grades.find(grade => {\r\n           return grade.subject === subject && grade.student === student && grade.type === type;\r\n        });\r\n        if (!hasItem) {\r\n            grades.push({\r\n                id: nexId++,\r\n                student,\r\n                studentLowerCase: student.toLowerCase(),\r\n                subject,\r\n                subjectLowerCase: subject.toLowerCase(),\r\n                type,\r\n                typeLowerCase: type.toLowerCase(),\r\n                value: 0,\r\n                isDeleted: true\r\n            })\r\n        }\r\n    })\r\n\r\n    grades.sort((a,b) => a.typeLowerCase.localeCompare(b.typeLowerCase));\r\n    grades.sort((a,b) => a.subjectLowerCase.localeCompare(b.subjectLowerCase));\r\n    grades.sort((a,b) => a.studentLowerCase.localeCompare(b.studentLowerCase));\r\n    return grades;\r\n}\r\n//insert com axios\r\nasync function insertGrade(grade) {\r\n    const response = await axios.post(apiUrl,grade);\r\n    return response.data.id;\r\n}\r\n\r\nasync function updateGrade(grade) {\r\n    const response = await axios.put(apiUrl,grade);\r\n    return response.data;\r\n}\r\n\r\nasync function deleteGrade(grade) {\r\n    const response = await axios.delete(`${apiUrl}/${grade.id}`);\r\n    return response.data;\r\n}\r\nasync function getValidationFromGradeType(gradeType) {\r\n    const gradeValidation = grade_Validation.find(item => item.gradeType === gradeType);\r\n\r\n    const {minValue, maxValue} = gradeValidation;\r\n\r\n    return  {\r\n        minValue,\r\n        maxValue,\r\n    }\r\n}\r\n\r\n */\r\nexport { getAllTweets }\r\n"]},"metadata":{},"sourceType":"module"}